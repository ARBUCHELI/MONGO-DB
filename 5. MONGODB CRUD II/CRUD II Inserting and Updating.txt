# CRUD II: INSERTING AND UPDATING
---------------------------------

* The _id Field
---------------
5 min
By this point, we’ve learned the fundamentals of querying data in MongoDB. In this lesson, we’ll learn how to insert new documents, and update existing ones.

As you continue to work with documents in MongoDB, you may notice one field that exists across every document: the _id field. It might look similar to this:

_id: ObjectId("5eb3d668b31de5d588f4305b")

The _id field plays a vital role in every document inside of a MongoDB collection, and it has a few distinct characteristics:

	. The _id field is required for every document in a collection and must be unique.

	. MongoDB automatically generates an ObjectId for the _id field if no value is provided.

	. Developers can specify the _id with something other than an ObjectId such as a number or random string, if desired.

	. The _id field is immutable, and once a document has an assigned _id, it cannot be updated or changed.

The ObjectId is a 12-byte data type that is commonly used for the _id field. When generated automatically, each ObjectId contains an embedded timestamp which is generally unique. This 
allows documents to be inserted in order of creation time (or very close to it) and for users to roughly sort their results by creation time if necessary. While we won’t explicitly need 
the _id field to update or create new documents, it’s important to note that this is how MongoDB identifies each unique document that is inserted or updated in a collection.

Let’s return to our restaurants collection to look at the _id fields that currently exist in our documents.

* Instructions
--------------
Checkpoint 1 Passed
1.
Connect to the restaurants database, then using the listingsAndReviews collection, query for all the documents in the collection using the .find() method. Take a moment to observe the _id 
field in each document.


Hint
Be sure to connect to run the command use restaurants to connect to the restaurants database first. To query for all the documents in a collection, you can use the .find() method with the 
following syntax:

db.<collection>.find()

Need another hint?
Once you put it together, your query should look like this:

mongo.sh
--------
test> use restaurants
switched to db restaurants
restaurants> db.listingsAndReviews.find()

[
  {
    _id: ObjectId("5eb3d668b31de5d588f43081"),
    address: {
      building: '543',
      coord: [ -73.9922175, 40.7543506 ],
      street: '8 Avenue',
      zipcode: '10018'
    },
    borough: 'Manhattan',
    cuisine: 'American',
    grades: [
      {
        date: ISODate("2014-12-29T00:00:00.000Z"),
        grade: 'A',
        score: 7
      },
      {
        date: ISODate("2014-06-26T00:00:00.000Z"),
        grade: 'A',
        score: 12
      },
      {
        date: ISODate("2013-06-03T00:00:00.000Z"),
        grade: 'A',
        score: 13
      },
      {
        date: ISODate("2012-05-29T00:00:00.000Z"),
        grade: 'A',
        score: 2
      },
      {
        date: ISODate("2012-01-26T00:00:00.000Z"),
        grade: 'A',
        score: 10
      }
    ],
    name: 'Wakamba',
    restaurant_id: '40564625'
  },

  ...



------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Inserting a Single Document
-----------------------------
11 min
Now that we know how MongoDB identifies each individual document, let’s focus on the Create aspect of CRUD operations. Specifically, how do we start adding new documents to our 
collections? In MongoDB, we can use the .insertOne() method to insert a single new document!

The syntax for the method looks as follows:

db.<collection>.insertOne(
  <new_document>, 
  {
    writeConcern: <document>,
  }
);

The .insertOne() method has a single required parameter, the document to be inserted, and a second optional parameter named writeConcern. We won’t be working with the writeConcern 
parameter in this course, but more details about the parameter can be found in the official MongoDB documentation. For now, know that it’s an optional parameter that allows us to specify 
how we want our write requests to be acknowledged by MongoDB.

Let’s take a look at an example where we insert a single document into a videogames collection:

db.videogames.insertOne({
  title: "Elden Ring",
  year: 2022,
  company: "Fromsoftware"
});

When a document is successfully inserted with .insertOne(), the output is an object with a field named acknowledged (related to the writeConcern parameter we mentioned earlier) with the 
value true and a field named insertedId where the value is the _id field for the newly inserted document. Here is what it looks like:

{
  "acknowledged": true,
  "insertedId": ObjectId("5fd989674e6b9ceb8665c63d")
}

Note that if we try to insert into a specified collection that does not exist, MongoDB will create one and insert the document into the newly created collection.

Now, let’s practice using the .insertOne() method by returning to our listingsAndReviews collection inside the restaurants database.

* Instructions
--------------
Checkpoint 1 Passed
1.
Connect to the restaurants database. Then, query the listingsAndReviews collection for all its documents to see what the structure of each document looks like.


Hint
Be sure to run the use restaurants command first to connect to the restaurants database. Then, use the .find() method to query for all the documents inside the listingsAndReviews 
collection.

Need another hint?
Once you put it together, your query should look like this:
db.listingsAndReviews.find()

Checkpoint 2 Passed
2.
Use the .insertOne() method to insert a new document in the listingsAndReviews collection with the following properties:

name: "Elvins",
cuisine: "American",
restaurant_id: "40564243"


Hint
To insert a new document into a collection, use the .insertOne() method with the following syntax:

db.<collection>.insertOne({ <field1>: <value1>, <field2>: <value2>, ... })

Need another hint?
You can call the .insertOne() method on the listingsAndReviews collection to add a new document to this collection. As an argument, pass in a document with the fields and values specified 
above.

Once you put it together, your query should look like this:

db.listingsAndReviews.insertOne({ name: "Elvins", cuisine: "American", restaurant_id: "40564243" })

Checkpoint 3 Passed
3.
Using .findOne(), search for the document you just inserted into the collection by its restaurant_id.


Hint
To query a collection for a single document using the findOne() method, you can use the following syntax:

db.<collection>.findOne({ <field>: <value> })

Need another hint?
You can call the .findOne() method on the listingsAndReviews collection to query this collection for a single document. As an argument, pass in a query document where the field is 
restaurant_id and the value is the string "40564243".

Once you put it together, your query should look like this:

db.listingsAndReviews.findOne({ restaurant_id: "40564243" })

mongosh
-------
test> use restaurants
switched to db restaurants
restaurants> db.listingsAndReviews.find()

[
  {
    _id: ObjectId("5eb3d668b31de5d588f43081"),
    address: {
      building: '543',
      coord: [ -73.9922175, 40.7543506 ],
      street: '8 Avenue',
      zipcode: '10018'
    },
    borough: 'Manhattan',
    cuisine: 'American',
    grades: [
      {
        date: ISODate("2014-12-29T00:00:00.000Z"),
        grade: 'A',
        score: 7
      },
      {
        date: ISODate("2014-06-26T00:00:00.000Z"),
        grade: 'A',
        score: 12
      },
      {
        date: ISODate("2013-06-03T00:00:00.000Z"),
        grade: 'A',
        score: 13
      },
      {
        date: ISODate("2012-05-29T00:00:00.000Z"),
        grade: 'A',
        score: 2
      },
      {
        date: ISODate("2012-01-26T00:00:00.000Z"),
        grade: 'A',
        score: 10
      }
    ],
    name: 'Wakamba',
    restaurant_id: '40564625'
  },

  ...


restaurants> db.listingsAndReviews.insertOne({name: "Elvins", cuisine: "American", restaurant_id: "40564243"});

{
  acknowledged: true,
  insertedId: ObjectId("660a8c272fa491ee081811c0")
}

restaurants> db.listingsAndReviews.findOne({restaurant_id: "40564243"});

{
  _id: ObjectId("660a8a65368569f951a29ace"),
  name: 'Elvins',
  cuisine: 'American',
  restaurant_id: '40564243'
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------











































