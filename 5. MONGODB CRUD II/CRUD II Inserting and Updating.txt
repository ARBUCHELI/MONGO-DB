# CRUD II: INSERTING AND UPDATING
---------------------------------

* The _id Field
---------------
5 min
By this point, we’ve learned the fundamentals of querying data in MongoDB. In this lesson, we’ll learn how to insert new documents, and update existing ones.

As you continue to work with documents in MongoDB, you may notice one field that exists across every document: the _id field. It might look similar to this:

_id: ObjectId("5eb3d668b31de5d588f4305b")

The _id field plays a vital role in every document inside of a MongoDB collection, and it has a few distinct characteristics:

	. The _id field is required for every document in a collection and must be unique.

	. MongoDB automatically generates an ObjectId for the _id field if no value is provided.

	. Developers can specify the _id with something other than an ObjectId such as a number or random string, if desired.

	. The _id field is immutable, and once a document has an assigned _id, it cannot be updated or changed.

The ObjectId is a 12-byte data type that is commonly used for the _id field. When generated automatically, each ObjectId contains an embedded timestamp which is generally unique. This 
allows documents to be inserted in order of creation time (or very close to it) and for users to roughly sort their results by creation time if necessary. While we won’t explicitly need 
the _id field to update or create new documents, it’s important to note that this is how MongoDB identifies each unique document that is inserted or updated in a collection.

Let’s return to our restaurants collection to look at the _id fields that currently exist in our documents.

* Instructions
--------------
Checkpoint 1 Passed
1.
Connect to the restaurants database, then using the listingsAndReviews collection, query for all the documents in the collection using the .find() method. Take a moment to observe the _id 
field in each document.


Hint
Be sure to connect to run the command use restaurants to connect to the restaurants database first. To query for all the documents in a collection, you can use the .find() method with the 
following syntax:

db.<collection>.find()

Need another hint?
Once you put it together, your query should look like this:

mongosh
-------
test> use restaurants
switched to db restaurants
restaurants> db.listingsAndReviews.find()

[
  {
    _id: ObjectId("5eb3d668b31de5d588f43081"),
    address: {
      building: '543',
      coord: [ -73.9922175, 40.7543506 ],
      street: '8 Avenue',
      zipcode: '10018'
    },
    borough: 'Manhattan',
    cuisine: 'American',
    grades: [
      {
        date: ISODate("2014-12-29T00:00:00.000Z"),
        grade: 'A',
        score: 7
      },
      {
        date: ISODate("2014-06-26T00:00:00.000Z"),
        grade: 'A',
        score: 12
      },
      {
        date: ISODate("2013-06-03T00:00:00.000Z"),
        grade: 'A',
        score: 13
      },
      {
        date: ISODate("2012-05-29T00:00:00.000Z"),
        grade: 'A',
        score: 2
      },
      {
        date: ISODate("2012-01-26T00:00:00.000Z"),
        grade: 'A',
        score: 10
      }
    ],
    name: 'Wakamba',
    restaurant_id: '40564625'
  },

  ...



------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Inserting a Single Document
-----------------------------
11 min
Now that we know how MongoDB identifies each individual document, let’s focus on the Create aspect of CRUD operations. Specifically, how do we start adding new documents to our 
collections? In MongoDB, we can use the .insertOne() method to insert a single new document!

The syntax for the method looks as follows:

db.<collection>.insertOne(
  <new_document>, 
  {
    writeConcern: <document>,
  }
);

The .insertOne() method has a single required parameter, the document to be inserted, and a second optional parameter named writeConcern. We won’t be working with the writeConcern 
parameter in this course, but more details about the parameter can be found in the official MongoDB documentation. For now, know that it’s an optional parameter that allows us to specify 
how we want our write requests to be acknowledged by MongoDB.

Let’s take a look at an example where we insert a single document into a videogames collection:

db.videogames.insertOne({
  title: "Elden Ring",
  year: 2022,
  company: "Fromsoftware"
});

When a document is successfully inserted with .insertOne(), the output is an object with a field named acknowledged (related to the writeConcern parameter we mentioned earlier) with the 
value true and a field named insertedId where the value is the _id field for the newly inserted document. Here is what it looks like:

{
  "acknowledged": true,
  "insertedId": ObjectId("5fd989674e6b9ceb8665c63d")
}

Note that if we try to insert into a specified collection that does not exist, MongoDB will create one and insert the document into the newly created collection.

Now, let’s practice using the .insertOne() method by returning to our listingsAndReviews collection inside the restaurants database.

* Instructions
--------------
Checkpoint 1 Passed
1.
Connect to the restaurants database. Then, query the listingsAndReviews collection for all its documents to see what the structure of each document looks like.


Hint
Be sure to run the use restaurants command first to connect to the restaurants database. Then, use the .find() method to query for all the documents inside the listingsAndReviews 
collection.

Need another hint?
Once you put it together, your query should look like this:
db.listingsAndReviews.find()

Checkpoint 2 Passed
2.
Use the .insertOne() method to insert a new document in the listingsAndReviews collection with the following properties:

name: "Elvins",
cuisine: "American",
restaurant_id: "40564243"


Hint
To insert a new document into a collection, use the .insertOne() method with the following syntax:

db.<collection>.insertOne({ <field1>: <value1>, <field2>: <value2>, ... })

Need another hint?
You can call the .insertOne() method on the listingsAndReviews collection to add a new document to this collection. As an argument, pass in a document with the fields and values specified 
above.

Once you put it together, your query should look like this:

db.listingsAndReviews.insertOne({ name: "Elvins", cuisine: "American", restaurant_id: "40564243" })

Checkpoint 3 Passed
3.
Using .findOne(), search for the document you just inserted into the collection by its restaurant_id.


Hint
To query a collection for a single document using the findOne() method, you can use the following syntax:

db.<collection>.findOne({ <field>: <value> })

Need another hint?
You can call the .findOne() method on the listingsAndReviews collection to query this collection for a single document. As an argument, pass in a query document where the field is 
restaurant_id and the value is the string "40564243".

Once you put it together, your query should look like this:

db.listingsAndReviews.findOne({ restaurant_id: "40564243" })

mongosh
-------
test> use restaurants
switched to db restaurants
restaurants> db.listingsAndReviews.find()

[
  {
    _id: ObjectId("5eb3d668b31de5d588f43081"),
    address: {
      building: '543',
      coord: [ -73.9922175, 40.7543506 ],
      street: '8 Avenue',
      zipcode: '10018'
    },
    borough: 'Manhattan',
    cuisine: 'American',
    grades: [
      {
        date: ISODate("2014-12-29T00:00:00.000Z"),
        grade: 'A',
        score: 7
      },
      {
        date: ISODate("2014-06-26T00:00:00.000Z"),
        grade: 'A',
        score: 12
      },
      {
        date: ISODate("2013-06-03T00:00:00.000Z"),
        grade: 'A',
        score: 13
      },
      {
        date: ISODate("2012-05-29T00:00:00.000Z"),
        grade: 'A',
        score: 2
      },
      {
        date: ISODate("2012-01-26T00:00:00.000Z"),
        grade: 'A',
        score: 10
      }
    ],
    name: 'Wakamba',
    restaurant_id: '40564625'
  },

  ...


restaurants> db.listingsAndReviews.insertOne({name: "Elvins", cuisine: "American", restaurant_id: "40564243"});

{
  acknowledged: true,
  insertedId: ObjectId("660a8c272fa491ee081811c0")
}

restaurants> db.listingsAndReviews.findOne({restaurant_id: "40564243"});

{
  _id: ObjectId("660a8a65368569f951a29ace"),
  name: 'Elvins',
  cuisine: 'American',
  restaurant_id: '40564243'
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Inserting Multiple Documents
------------------------------
12 min
We have just used .insertOne() to insert a single document into a collection, but what if we want to insert multiple documents into a collection? Here’s where the MongoDB .insertMany() 
method comes in.

As its name suggests, .insertMany() will insert multiple documents into a collection. Much like .insertOne(), if the collection we’ve specified does not exist, one will be created.

The syntax for the method is as follows:

db.<collection>.insertMany(
  [<document1>, <document2>, ...],
  {
    writeConcern: <document>,
    ordered: <boolean>
  }
);

This method has three parameters:

	1. An array of documents; the documents we want to add to the collection.

	2. A parameter named writeConcern.

	3. A parameter named ordered.

The ordered parameter can be handy since it allows us to specify if MongoDB should perform an ordered or unordered insert. If set to false, documents are inserted in an unordered format. 
If set to true, the default behavior, MongoDB will insert the documents in the order given in the array.

It’s worth noting that with ordered inserts, if a single document fails to be inserted, the entire insert operation will cease, and any remaining documents will not be inserted. On the 
other hand, unordered inserts will continue in the case of an insert failure and attempt to insert any remaining documents.

Let’s look at an example of .insertMany() on a collection named students:

db.students.insertMany([
  {
    name: "Mia Ramirez",
    age: 15
  },
  {
    name: "Kiv Huang",
    age: 17
  },
  {
    name: "Sam Soto",
    age: 16
  }
], { ordered: true })

The command above will insert the documents in the order specified. Below you will find the output of the command with an additional note that indicates which _id represents which 
document.

{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("63054a5376742c0e5a0cfafb"), // Mia
    '1': ObjectId("63054a5376742c0e5a0cfafc"), // Kiv
    '2': ObjectId("63054a5376742c0e5a0cfafd") // Sam
  }
}

Let’s practice adding multiple new restaurants to our listingsAndReviews collection!

* Instructions
--------------
Checkpoint 1 Passed
1.
Connect to the restaurants database. Insert two new documents in an ordered fashion into the listingsAndReviews collection. The documents should have the following properties, 
respectively:

// 1st document
  name: "Boucherie",
  borough: "Manhattan",
  cuisine: "American",
  restaurant_id: "49246215"

// 2nd document
  name: "Carmines",
  borough: "Manhattan",
  cuisine: "Italian",
  restaurant_id: "48259401"


Hint
Remember to include each document in an array, and pass that array into the .insertMany() method as the first argument. Use the following syntax for the insertMany() method:

db.<collection>.insertMany(
  [<document1>, <document2>, ...],
  {
    ordered: <boolean>
  }
);

Need another hint?
You can call the .insertMany() method on the listingsAndReviews collection to insert multiple documents into this collection. As an argument, pass in an array of documents with the fields 
and values provided to you.

Once you put it together, your query should look like this:

db.listingsAndReviews.insertMany([
  {
    name: "Boucherie", 
    borough: "Manhattan", 
    cuisine: "American", 
   restaurant_id: "49246215"
  }, 
  {
    name: "Carmines", 
    borough: "Manhattan", 
    cuisine: "Italian", 
    restaurant_id: "48259401"
  }
])

Checkpoint 2 Passed
2.
Using .findOne() method, query for one of the documents that you just inserted using the name field.


Hint
To query a collection for a single document using the findOne() method, you can use the following syntax:

db.<collection>.findOne({ <field>: <value> })

Need another hint?
Be sure to pass in a query document that specifies name as the field, and "Boucherie" or "Carmines" as the value.

Once you put it together, your query should look as follows:

mongosh
-------
test> use restaurants
switched to db restaurants
restaurants> db.listingsAndReviews.insertMany([{name: "Boucherie", borough: "Manhattan", cuisine: "American", restaurant_id: "49246215"},{name: "Carmines", borough: "Manhattan", cuisine: "Italian", restaurant_id: "48259401"}]);
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("660a8ea1e81fd8de3e942ca6"),
    '1': ObjectId("660a8ea1e81fd8de3e942ca7")
  }
}
restaurants> db.listingsAndReviews.findOne({name: "Boucherie"});
{
  _id: ObjectId("660a8ea1e81fd8de3e942ca6"),
  name: 'Boucherie',
  borough: 'Manhattan',
  cuisine: 'American',
  restaurant_id: '49246215'
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

Updating a Single Document
13 min
Now that we have explored a few Create operations, let’s look at operations that Update data.

In MongoDB, we can use the .updateOne() method to update a single document. The method finds the first document that matches specific filter criteria and applies specified update modifications. Note that it updates the first matching document, even if multiple documents match the criteria.

Let’s take a look at the syntax for the .updateOne() method:

db.<collection>.updateOne(<filter>, <update>, <options>)

The method has three parameters:

filter: A document that provides selection criteria for the document to update.
update: A document that specifies any modifications to be applied. This parameter gives us quite a bit of flexibility, allowing us to modify existing fields, insert new ones, or even replace an entire document.
options: A document that includes any additional specifications for our update operation such as upsert and writeConcern.
To explore the importance of each of these parameters and how the updateOne() method works, consider a third-party retail store for used smartphones. The store keeps all their information in a collection called products, where each document holds information regarding a specific type of smartphone:

{ 
  _id: ObjectId("507f1fg7bcf865d799439h11"), 
  title: "iPhoneX", 
  price: 1000,
  stock: 25 
},
{ 
  _id: ObjectId("507f1fg7bcf865d799439h12"), 
  title: "iPhone7", 
  price: 600,
  stock: 25 
},
{ 
  _id: ObjectId("507f1fg7bcf865d799439h13"), 
  title: "iPhone6", 
  price: 500,
  stock: 25 
}

To start an update operation, we must first choose our filter. This is similar to when we used find() to retrieve a document based on specific criteria. So, for example, if we wanted to update only the document with the title "IPhoneX", we could specify the title as the filter:

db.products.updateOne({ title: "iPhoneX" }, <update>, <options> });

Now that we have a document we can target for the update, we can move onto the update parameter.

To update a document in MongoDB, we have to specify what fields we want to update and how we want to update them. This is where the update parameter comes into play. To specify how we want to update a document, we can use MongoDB update operators. MongoDB offers us several update operators that can perform a variety of modifications to document fields. In this exercise, we’ll focus on the $set update operator. This operator allows us to replace a field’s value with one that we provide.

To see this in action, imagine a new phone model is launching soon, and the price of the "iPhoneX" will need to be decreased in order to remain competitive. We want to update the price from 1000 to 679. We can accomplish this by running the following command:

db.products.updateOne({ title: "iPhoneX" }, { $set: { price: 679 } });

If successful, the operation should return:

{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }

After running the previous command, we could query for the item to confirm the update was successful:

db.products.findOne({ title: "iPhoneX" })

And find our document was updated:

{ 
  _id: ObjectId("507f1fg7bcf865d799439h11"),
  title: "iPhoneX", 
  price: 679 
}

In this case, querying on the title field works fine, assuming the value is unique for every document. Usually, we want to be as specific as possible with our filtering criteria, so we can include multiple fields to add more specificity to our search. Remember that even if multiple documents match the filter criteria, only a single one (the first match) will be updated.

Note: While exploring the updateOne() command, we didn’t cover the use of the <options> parameter. This is because these fields are optional and aren’t required to perform the base action of updating a record. To explore the <options> parameter further, visit the MongoDB documentation for the updateOne() method.

Let’s practice updating using the updateOne() method by returning to our restaurants database.

Instructions
Checkpoint 1 Passed
1.
Connect to the restaurants database. Then, use the .findOne() method to query for the document with the restaurant_id of "50014008" from the listingsAndReviews collection.


Hint
To query a collection for a single document using the findOne() method, you can use the following syntax:

db.<collection>.findOne({ <field>: <value> })

Need another hint?
You can call the .findOne() method on the listingsAndReviews collection to query for a single document. Be sure to query on the restaurant_id field and provide a value of "50014008".

Once you put it together, your query should look like this:

db.listingsAndReviews.findOne({ restaurant_id: "50014008" });

Checkpoint 2 Passed
2.
The cuisine of this restaurant is incorrect. Update the value of the restaurant’s cuisinefield to“American”`.


Hint
Use the .updateOne() method to update a single document in a MongoDB collection. Use the restaurant_id field as the filter and the $set operator to replace the value for the field cuisine.

Need another hint?
As the first argument, provide a query document that specifies the `restaurant_id` field. As the second argument, provide an update document that uses the `$set` operator to update the `cuisine` field.
Once you put it together, your query should look as follows:

db.listingsAndReviews.updateOne({ restaurant_id: "50014008" }, { $set: { cuisine: "American" } })

Checkpoint 3 Passed
3.
Query the listingsAndReviews collection for the document to ensure it was updated!


Hint
To query a collection for a single document using the findOne() method, you can use the following syntax:

db.<collection>.findOne({ <field>: <value> })

Need another hint?
You can call the .findOne() method on the listingsAndReviews collection to query for a single document. Be sure to query on the restaurant_id field and provide a value of "50014008".

Once you put it together, your query should look like this:

mongosh
-------
est> use restaurants;
switched to db restaurants
restaurants> db.listingsAndReviews.findOne({restaurant_id: "50014008" });
{
  _id: ObjectId("5eb3d669b31de5d588f484e0"),
  address: {
    building: '770',
    coord: [ -74.00959999999999, 40.636179 ],
    street: '59 Street',
    zipcode: '11220'
  },
  borough: 'Brooklyn',
  cuisine: 'Chinese',
  grades: [
    {
      date: ISODate("2014-10-09T00:00:00.000Z"),
      grade: 'Z',
      score: 22
    }
  ],
  name: 'D.C.Plzz Seafood',
  restaurant_id: '50014008'
}
restaurants> db.listingsAndReviews.updateOne({restaurant_id: "50014008"}, {$set: {cuisine: "American"}});
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 0,
  upsertedCount: 0
}
restaurants> db.listingsAndReviews.findOne({restaurant_id: "50014008" });
{
  _id: ObjectId("5eb3d669b31de5d588f484e0"),
  address: {
    building: '770',
    coord: [ -74.00959999999999, 40.636179 ],
    street: '59 Street',
    zipcode: '11220'
  },
  borough: 'Brooklyn',
  cuisine: 'American',
  grades: [
    {
      date: ISODate("2014-10-09T00:00:00.000Z"),
      grade: 'Z',
      score: 22
    }
  ],
  name: 'D.C.Plzz Seafood',
  restaurant_id: '50014008'
}
restaurants> 

------------------------------------------------------------------------------------------------------------------------------------------------------------------





































































